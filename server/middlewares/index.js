import expressJwt from "express-jwt";
import userModel from "../models/user";
import courseModel from '../models/course';
//validate JWT















































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































































//extract token from the cookie, and decode the userId from the token,
//pass the userid to the request 
export const requireSignin = expressJwt({
    getToken: (req, res) => req.cookies.token,
    secret: process.env.JWT_SECRET,
    algorithms: ["HS256"],
});


export const isInstructor = async (req, res, next) => {
    try {
        const user = await userModel.findById(req.user._id).exec();

        if (!user.role.includes("Instructor")) {
            return res.sendStatus(403);
        } else {
            next();
        }
    } catch (error) {
        console.log(error);
    }

}

export const darfDeleteUndUpload = async (req, res, next) => {
    const { slug } = req.params;

    try {
        const course = await courseModel.findOne({ "slug": slug, "instructor": req.user._id }).exec();
        if (course) next();
        else {
            return res.sendStatus(403)
        }

    } catch (error) {
        console.log(error);
        return res.status(500).json("unexpected problem has accured")
    }
}


export const checkIsEnrolled = async (req, res, next) => {
    const { slug } = req.params;
    console.log("SLUGGGGG===>",slug)
    console.log("====>",req.user._id)
    try {
        const userCourses = await userModel.find({ '_id': req.user._id }).select('courses').exec();
        //check if course is enrolles
        const course = await courseModel.findOne({ slug: slug }).exec()
        console.log("course not enrolled=>", course)
        /*if(!course){
            return res.status(403).json("resourse access forbidden!")
        }*/
        if (userCourses[0].courses.includes(course._id)) {
            console.log('course is enrolled !')
            req._course = course;
            next()
        }
        else {
            return res.status(403).json("access resource is forbidden")
        }
    } catch (error) {
        console.log(error) 
        return res.status(403).json("access resource is forbidden")
    }

}